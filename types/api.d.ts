/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update deployment plan
         * @description Create or update the deployment plan configuration
         */
        put: operations["updatePlan"];
        /**
         * Get deployment plan
         * @description Retrieve the current deployment plan with stages and SLOs
         */
        post: operations["getPlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List releases
         * @description Get a list of all releases including current and completed ones
         */
        post: operations["listReleases"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create release
         * @description Create a new release. Only one release can be staged at a time
         */
        post: operations["createRelease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release/active/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get active release
         * @description Retrieve the active release, or null if no active release exists
         */
        post: operations["getActiveRelease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Control active release execution
         * @description Start or stop the active release
         */
        post: operations["controlActiveRelease"];
        /**
         * Delete active release
         * @description Delete the active release if it is in 'not_started' state
         */
        delete: operations["deleteActiveRelease"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/release/{releaseId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get release details
         * @description Retrieve release state, plan record, and stage information
         */
        post: operations["getRelease"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stage/{stageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get stage status
         * @description Get the current state of a specific stage
         */
        get: operations["getStage"];
        put?: never;
        /**
         * Progress stage
         * @description Advance a stage by approving or denying it
         */
        post: operations["progressStage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/worker/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get worker versions
         * @description Proxy request to fetch worker versions from Cloudflare API
         */
        post: operations["getWorkerVersions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/worker/deployments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get worker deployments
         * @description Proxy request to fetch worker deployments from Cloudflare API
         */
        post: operations["getWorkerDeployments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Cloudflare account and worker connection details required for API authentication */
        CloudflareConnection: {
            /**
             * @description Cloudflare account ID
             * @example f855e2dd8145bf97126b4cdd08464a5e
             */
            accountId: string;
            /**
             * @description Cloudflare Worker name
             * @example my-worker
             */
            workerName: string;
            /**
             * @description Cloudflare API token for authentication
             * @example vG9vYJ1_cPOzA1JyjDWdaL5X26bFUKNfnmXLA200
             */
            apiToken: string;
        };
        /** @description Connection Id unique per Worker connection */
        ConnectionIdRequest: {
            /**
             * @description Combined connection identifier in format accountId-workerName-hashedApiToken
             * @example f855e2dd8145bf97126b4cdd08464a5e-my-worker-a1b2c3d4
             */
            connectionId: string;
        };
        /** @example {
         *       "order": 0,
         *       "description": "",
         *       "target_percent": 25,
         *       "soak_time": 10,
         *       "auto_progress": true
         *     } */
        PlanStage: {
            /** @description order of the stage in the plan */
            order: number;
            description?: string;
            /** @description target percentage of traffic that goes to the new Worker version */
            target_percent: number;
            /** @description soak time in seconds */
            soak_time: number;
            /** @description whether the stage automatically progresses or if it needs a human to manually progress it */
            auto_progress: boolean;
        };
        /** @example {
         *       "id": "release-1a2b3c4d-order-2",
         *       "order": 2,
         *       "releaseId": "1a2b3c4d",
         *       "state": "queued",
         *       "time_started": "2023-01-01T00:00:00Z",
         *       "time_elapsed": 0,
         *       "time_done": "2023-01-01T00:00:00Z",
         *       "logs": ""
         *     } */
        ReleaseStage: {
            id: string;
            /** @description order of the stage in the release */
            order: number;
            /** @description id of the release */
            releaseId: string;
            /**
             * @description state of the stage
             * @enum {string}
             */
            state: "queued" | "awaiting_approval" | "running" | "done_failed" | "done_successful" | "done_cancelled" | "error";
            /** Format: date-time */
            time_started: string;
            time_elapsed: number;
            /** Format: date-time */
            time_done: string;
            logs: string;
        };
        /** @example {
         *       "id": "b2a2c3d4e5f6a1b2d3d5e5f6a1b2c3d5",
         *       "state": "not_started",
         *       "plan_record": {
         *         "$ref": "#/components/schemas/Plan"
         *       },
         *       "old_version": "fa2c3d4e5a6a1b2d3d5e5f6a1b2c3d5",
         *       "new_version": "e1a2c3d4e5f6a1b2d3d5e5f6a1b2c3d5",
         *       "stages": {
         *         "type": "array",
         *         "items": {
         *           "$ref": "#/components/schemas/StageRef"
         *         }
         *       },
         *       "time_started": {
         *         "type": "string",
         *         "format": "date-time"
         *       },
         *       "time_elapsed": {
         *         "type": "integer"
         *       },
         *       "time_done": {
         *         "type": "string",
         *         "format": "date-time"
         *       }
         *     } */
        Release: {
            id: string;
            /** @enum {string} */
            state: "not_started" | "running" | "done_stopped_manually" | "done_failed_slo" | "done_successful" | "error";
            plan_record: components["schemas"]["Plan"];
            old_version: string;
            new_version: string;
            stages: components["schemas"]["StageRef"][];
            /** Format: date-time */
            time_created: string;
            /** Format: date-time */
            time_started: string;
            time_elapsed: number;
            /** Format: date-time */
            time_done: string;
        };
        StageRef: {
            id: string;
            order: number;
        };
        /** @example {
         *       "stages": [
         *         {
         *           "$ref": "#/components/schemas/PlanStage"
         *         }
         *       ],
         *       "slos": [
         *         {
         *           "$ref": "#/components/schemas/SLO"
         *         }
         *       ],
         *       "worker_name": "my-worker"
         *     } */
        Plan: {
            stages: components["schemas"]["PlanStage"][];
            slos: components["schemas"]["SLO"][];
            /**
             * @description Fraction of soak time to use for SLO polling rate (0.1 = 1/10, 1.0 = full time)
             * @example 0.5
             */
            polling_fraction: number;
            /** Format: date-time */
            readonly time_last_saved?: string;
            worker_name: string;
        };
        /**
         * @description Service Level Objective configuration
         * @example {
         *       "percentile": "p99",
         *       "latency_ms": 100
         *     }
         */
        SLO: {
            /**
             * @description Latency percentile to monitor
             * @enum {string}
             */
            percentile: "p999" | "p99" | "p90" | "median";
            /** @description Maximum allowed latency in milliseconds */
            latency_ms: number;
        };
        /** @description Cloudflare Worker version information */
        WorkerVersion: {
            /**
             * @description Unique version identifier/hash
             * @example 25d3aa76-e335-4001-87a9-43a6be83f294
             */
            id: string;
            /**
             * @description Version number
             * @example 24
             */
            number: number;
            /** @description Version metadata including creation info */
            metadata?: {
                /**
                 * Format: date-time
                 * @description Timestamp when version was created
                 * @example 2025-06-27T21:18:29.265546Z
                 */
                created_on?: string;
                /** @example api */
                source?: string;
                author_id?: string;
                author_email?: string;
                has_preview?: boolean;
            } & {
                [key: string]: unknown;
            };
            /** @description Additional annotations */
            annotations?: {
                [key: string]: unknown;
            };
        };
        /** @description Cloudflare Worker deployment information */
        WorkerDeployment: {
            /**
             * @description Unique deployment identifier
             * @example 01234567-89ab-cdef-0123-456789abcdef
             */
            id: string;
            /** @description Versions included in this deployment with their traffic percentages */
            versions: {
                /**
                 * @description Version identifier
                 * @example 25d3aa76-e335-4001-87a9-43a6be83f294
                 */
                version_id: string;
                /**
                 * @description Traffic percentage for this version (0-100)
                 * @example 100
                 */
                percentage: number;
            }[];
            /**
             * @description Deployment source (e.g., api, dash)
             * @example api
             */
            source?: string;
            /**
             * @description Deployment strategy
             * @example percentage
             */
            strategy?: string;
            /** @description Email of deployment author */
            author_email?: string;
            /**
             * Format: date-time
             * @description Timestamp when deployment was created
             * @example 2025-06-27T21:18:29.265546Z
             */
            created_on?: string;
            /** @description Additional deployment annotations */
            annotations?: {
                [key: string]: unknown;
            };
        };
        /**
         * @description Standard error response format
         * @example {
         *       "message": "Invalid request",
         *       "ok": false
         *     }
         */
        Error: {
            /** @description Error message describing what went wrong */
            message: string;
            /**
             * @description Always false for error responses
             * @enum {boolean}
             */
            ok: false;
        };
    };
    responses: never;
    parameters: {
        stageId: string;
        releaseId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updatePlan: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    connection: components["schemas"]["CloudflareConnection"];
                    plan: components["schemas"]["Plan"];
                };
            };
        };
        responses: {
            /** @description Plan updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Plan"];
                };
            };
            /** @description Plan is invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getPlan: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CloudflareConnection"];
            };
        };
        responses: {
            /** @description Plan retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Plan"];
                };
            };
            /** @description Invalid connection details */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Plan not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listReleases: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    connection: components["schemas"]["CloudflareConnection"];
                    /**
                     * @description Maximum number of releases to return (default 50, max 100)
                     * @default 50
                     */
                    limit?: number;
                    /**
                     * @description Number of releases to skip for pagination (default 0)
                     * @default 0
                     */
                    offset?: number;
                    /**
                     * Format: date-time
                     * @description Filter releases created after this timestamp (ISO 8601 format)
                     * @example 2024-01-01T00:00:00Z
                     */
                    since?: string;
                    /**
                     * Format: date-time
                     * @description Filter releases created before this timestamp (ISO 8601 format)
                     * @example 2024-12-31T23:59:59Z
                     */
                    until?: string;
                    /**
                     * @description Filter releases by state
                     * @enum {string}
                     */
                    state?: "not_started" | "running" | "done_successful" | "done_stopped_manually" | "done_failed_slo";
                };
            };
        };
        responses: {
            /** @description List of releases retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Release"][];
                };
            };
            /** @description Invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    createRelease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Connection identifier */
                    connectionId: string;
                    /** @description Old version ID */
                    old_version?: string;
                    /** @description New version ID */
                    new_version?: string;
                };
            };
        };
        responses: {
            /** @description Release created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Release"];
                };
            };
            /** @description Release cannot be created from the plan */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description A release is already staged */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getActiveRelease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CloudflareConnection"];
            };
        };
        responses: {
            /** @description Success (returns active release or null) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Release"] | null;
                };
            };
            /** @description Invalid connection details or something is wrong with the active release */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    controlActiveRelease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description The command to execute on the active release
                     * @enum {string}
                     */
                    command: "start" | "stop";
                    /** @description Cloudflare Account ID */
                    account_id?: string;
                    /** @description Cloudflare API Token for authentication */
                    api_token?: string;
                };
            };
        };
        responses: {
            /** @description start or stop was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description The provided command is not valid for the release in its current state */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description No active release found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteActiveRelease: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Release deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description No active release found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Release has to be in a "not_started" state */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getRelease: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                releaseId: components["parameters"]["releaseId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CloudflareConnection"];
            };
        };
        responses: {
            /** @description Release details retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Release"];
                };
            };
            /** @description Invalid connection details */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Release not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                stageId: components["parameters"]["stageId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the Stage info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReleaseStage"];
                };
            };
            /** @description Stage not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    progressStage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                stageId: components["parameters"]["stageId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/text": "approve" | "deny";
            };
        };
        responses: {
            /** @description Successfully progressed the stage */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid command */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Stage not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getWorkerVersions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the Cloudflare Worker */
                    worker_name: string;
                    /** @description Cloudflare Account ID */
                    account_id: string;
                    /** @description Cloudflare API Token for authentication */
                    api_token: string;
                };
            };
        };
        responses: {
            /** @description Worker versions retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        result?: components["schemas"]["WorkerVersion"][];
                    };
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Invalid API token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getWorkerDeployments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the Cloudflare Worker */
                    worker_name: string;
                    /** @description Cloudflare Account ID */
                    account_id: string;
                    /** @description Cloudflare API Token for authentication */
                    api_token: string;
                };
            };
        };
        responses: {
            /** @description Worker deployments retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        result?: components["schemas"]["WorkerDeployment"][];
                    };
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Invalid API token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Access denied */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Worker not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
